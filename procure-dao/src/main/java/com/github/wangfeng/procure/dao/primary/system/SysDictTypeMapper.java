package com.github.wangfeng.procure.dao.primary.system;

import com.github.wangfeng.procure.common.po.entity.primary.SysDictTypeDO;
import java.util.List;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

@Mapper
@Repository
public interface SysDictTypeMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_dict_type
     *
     * @mbg.generated Tue Oct 29 09:42:03 CST 2019
     */
    int deleteByPrimaryKey(Long dictId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_dict_type
     *
     * @mbg.generated Tue Oct 29 09:42:03 CST 2019
     */
    int insert(SysDictTypeDO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_dict_type
     *
     * @mbg.generated Tue Oct 29 09:42:03 CST 2019
     */
    int insertSelective(SysDictTypeDO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_dict_type
     *
     * @mbg.generated Tue Oct 29 09:42:03 CST 2019
     */
    SysDictTypeDO selectByPrimaryKey(Long dictId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_dict_type
     *
     * @mbg.generated Tue Oct 29 09:42:03 CST 2019
     */
    int updateByPrimaryKeySelective(SysDictTypeDO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_dict_type
     *
     * @mbg.generated Tue Oct 29 09:42:03 CST 2019
     */
    int updateByPrimaryKey(SysDictTypeDO record);

    /**
     * 根据条件分页查询字典类型
     *
     * @param dictType 字典类型信息
     * @return 字典类型集合信息
     */
    public List<SysDictTypeDO> selectDictTypeList(SysDictTypeDO dictType);

    /**
     * 根据所有字典类型
     *
     * @return 字典类型集合信息
     */
    public List<SysDictTypeDO> selectDictTypeAll();

    /**
     * 根据字典类型ID查询信息
     *
     * @param dictId 字典类型ID
     * @return 字典类型
     */
    public SysDictTypeDO selectDictTypeById(Long dictId);

    /**
     * 根据字典类型查询信息
     *
     * @param dictType 字典类型
     * @return 字典类型
     */
    public SysDictTypeDO selectDictTypeByType(String dictType);

    /**
     * 通过字典ID删除字典信息
     *
     * @param dictId 字典ID
     * @return 结果
     */
    public int deleteDictTypeById(Long dictId);

    /**
     * 批量删除字典类型
     *
     * @param ids 需要删除的数据
     * @return 结果
     */
    public int deleteDictTypeByIds(Long[] ids);

    /**
     * 新增字典类型信息
     *
     * @param dictType 字典类型信息
     * @return 结果
     */
    public int insertDictType(SysDictTypeDO dictType);

    /**
     * 修改字典类型信息
     *
     * @param dictType 字典类型信息
     * @return 结果
     */
    public int updateDictType(SysDictTypeDO dictType);

    /**
     * 校验字典类型称是否唯一
     *
     * @param dictType 字典类型
     * @return 结果
     */
    public SysDictTypeDO checkDictTypeUnique(String dictType);
}